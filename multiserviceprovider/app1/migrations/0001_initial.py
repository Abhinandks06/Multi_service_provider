# Generated by Django 5.0.1 on 2024-02-06 07:15

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(default='', max_length=128)),
                ('role', models.CharField(default='client', max_length=15)),
                ('userid', models.AutoField(primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ServiceTypes',
            fields=[
                ('service_id', models.AutoField(primary_key=True, serialize=False)),
                ('service_type', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.TextField(max_length=100)),
                ('last_name', models.TextField(max_length=100)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('password', models.CharField(max_length=128)),
                ('phone', models.CharField(max_length=12, unique=True)),
                ('district', models.TextField(max_length=100)),
                ('state', models.TextField(max_length=100)),
                ('pincode', models.IntegerField()),
                ('role', models.CharField(default='', max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.TextField(max_length=100)),
                ('last_name', models.TextField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('phone', models.CharField(max_length=12, unique=True)),
                ('pincode', models.IntegerField()),
                ('district', models.TextField(max_length=100)),
                ('state', models.TextField(max_length=100)),
                ('role', models.CharField(max_length=15)),
                ('status', models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='BranchManager',
            fields=[
                ('managerid', models.AutoField(primary_key=True, serialize=False)),
                ('providername', models.CharField(max_length=100)),
                ('date_of_joining', models.DateField()),
                ('phone_no', models.CharField(max_length=15)),
                ('state', models.CharField(max_length=100)),
                ('district', models.CharField(max_length=100)),
                ('pincode', models.IntegerField()),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('branchid', models.AutoField(primary_key=True, serialize=False)),
                ('providername', models.CharField(max_length=100)),
                ('district', models.CharField(max_length=100)),
                ('pincode', models.IntegerField()),
                ('managerid', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app1.branchmanager')),
            ],
        ),
        migrations.CreateModel(
            name='ClientBooking',
            fields=[
                ('bookingid', models.AutoField(primary_key=True, serialize=False)),
                ('district', models.TextField(max_length=100)),
                ('name', models.CharField(max_length=255)),
                ('phone', models.CharField(max_length=15)),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('canceled', 'Canceled'), ('completed', 'Completed')], default='pending', max_length=10)),
                ('branchid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app1.branch')),
                ('clientid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app1.client')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('serviceid', models.AutoField(primary_key=True, serialize=False)),
                ('district', models.TextField(max_length=100)),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('status', models.CharField(choices=[('assigned', 'Assigned'), ('underprogress', 'Underprogress'), ('completed', 'Completed'), ('canceled', 'Canceled'), ('reportgiven', 'Report Given'), ('reportverified', 'Report Verified')], default='assigned', max_length=15)),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('review', models.TextField(blank=True, null=True)),
                ('paymentstatus', models.CharField(choices=[('requested', 'Requested'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='requested', max_length=15)),
                ('bookingid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app1.clientbooking')),
                ('branchid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app1.branch')),
                ('clientid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app1.client')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('providerid', models.AutoField(primary_key=True, serialize=False)),
                ('providername', models.CharField(max_length=100, unique=True)),
                ('ownername', models.CharField(max_length=100)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('state', models.CharField(max_length=100)),
                ('contact_number', models.CharField(max_length=15)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('service_type', models.ManyToManyField(to='app1.servicetypes')),
            ],
        ),
        migrations.AddField(
            model_name='branchmanager',
            name='providerid',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='app1.serviceprovider'),
        ),
        migrations.AddField(
            model_name='branch',
            name='providerid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app1.serviceprovider'),
        ),
        migrations.AddField(
            model_name='branch',
            name='service_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app1.servicetypes'),
        ),
        migrations.CreateModel(
            name='WorkerStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workstatus', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='pending', max_length=15)),
                ('branchid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app1.branch')),
                ('workerid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app1.worker')),
            ],
        ),
        migrations.CreateModel(
            name='WorkerReport',
            fields=[
                ('reportid', models.AutoField(primary_key=True, serialize=False)),
                ('duration_of_work', models.CharField(max_length=100)),
                ('requirements', models.TextField()),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('num_workers_needed', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('completed', 'Completed'), ('canceled', 'Canceled'), ('reportgiven', 'ReportGiven'), ('reportverified', 'ReportVerified')], default='reportgiven', max_length=15)),
                ('report_pdf', models.FileField(blank=True, null=True, upload_to='worker_reports/')),
                ('branchid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app1.branch')),
                ('serviceid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app1.service')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app1.worker')),
            ],
        ),
        migrations.AddField(
            model_name='worker',
            name='branchid',
            field=models.ManyToManyField(to='app1.branch'),
        ),
        migrations.AddField(
            model_name='worker',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app1.serviceprovider'),
        ),
        migrations.AddField(
            model_name='worker',
            name='service_types',
            field=models.ManyToManyField(to='app1.servicetypes'),
        ),
        migrations.AddField(
            model_name='service',
            name='workerid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app1.worker'),
        ),
    ]
